* 官方教程
1. 打开方式： C-h t
2. 退出Emacs C-x C-c
3. 退出正在运行的命令 C-g
   1) 整屏移动
      查看下一屏 C-v      查看上一屏 M-v  
      重绘屏幕，并将光标所在行置于屏幕的中央 C-l
   2) 移动光标
       上一行 C-p     p - previous    下一行 C-n    n - next
       向前移 C-b     b - before       向后移 C-f     f - forward
       向前移动一个词 M-b              向后移动一个词 M-f
       将光标移动至一行的头部 C-a  将光标移至一行的尾部 C-e
       移动到词首 M-a                    移动到词尾 M-e
       移动到所有文字开头 Shift M-<  移动到所有文字末尾Shift M->
4. 为一个命令指定数字参数(重复次数)  C-u 数字 命令
5. 删除
   1) 
         <DEL>        删除光标前的一个字符
           C-d           删除光标后的一个字符

         M-<DEL>   移除光标前
          M-d           移除光标后的一个词

           C-k           移除从光标到“行尾”间的字符
           M-k          移除从光标到“句尾”间的字符
   2) 整段删除
      在开始处 Shift C-@，结束处 C-w
6. 撤销 C-/

7. 文件
   1) 打开/创建 C-x C-f
   2) 保存       
      当前缓冲期   C-x C-s
     多个缓冲期  C-x s
     
     注： 关闭文件备份
        #+BEGIN_SRC 
 M-x customize-variable <Return> make-backup-files <Return>

#+END_SRC
8. 缓冲区
   C-x C-b   列出缓冲区
9. 自动保存
   恢复自动保存  
   打开原来的文件（注意不是自动保存文件）然后输入 M-x recover file
10. 开/关自动换行
     #+BEGIN_SRC 
     M-x auto-fill-mode <Return>
     
     #+END_SRC
11. 设置行边界
     #+BEGIN_SRC 
      C-x f
     
     #+END_SRC
12. 搜索
    向下搜索 C-s   向上搜索 C-r
13. 查看帮助
    C-h c 命令
    C-h k 命令  (更详细)
    C-h f 函数
   


* Master Emacs in 21 Days
** 初始化安装
     将emacs的压缩包解压到某个路径
     运行bin路径下的runemacs.exe
     c-x d ~ RET，编辑区域左上角的文件路径即emacs的HOME。或者键入C-h v user-init-file并查看返回值
     在HOME路径下，emacs会自动生成.emacs.d文件夹，如果没有请自己建立
     在该文件夹下新建init.el，输入如下代码
     #+BEGIN_SRC  emacs-lisp
     ;; This file is only for windows 7/8/8.1
     ;; The only thing it does is to set the HOME directories for emacs,
     ;; then trigger the init.el in the directory specified by HOME to
     ;; accomplish the true initialization
     ;; You should put this file in the **default** HOME directory right after
     ;; emacs is installed
     (setenv "HOME" "C:/emacs/") ;; you can change this dir to the place you like
     (load "~/.emacs.d/init.el")
     #+END_SRC
     顺便删掉前面几步中你见到的任何.emacs文件，保证emacs利用init.el启动

     
** Day 1
1. elisp
   1) 分号表示注释  (通常用两个分号，一个分号的注释会居中)
   2) 逆波兰表达式
      
   3) 在 `lisp-interaction-mode' 中可以计算s式
      1) 把光标移到闭括号后，之后按 C-j
         会在buffer中插入当前运算的结果
      2) C-x C-e
         在emacs最底部,即 minibuffer中显示结果
   4)指令
   `setq' 可以将一个值赋给一个变量
   `insert' 会在光标处插入字符串
   ‘defun’定义函数
   ‘progn’将多个命令绑定
   `let' 将一个值和一个局部变量绑定
   ‘format ’ 格式化字符串  
   ‘read-from-minibuffer’
   '(setq list-of-names '("Sarah" "Chloe" "Mathilde"))' 将一些名字存到列表中：
   `car'    取得第一个名字
   `cdr'    取得剩下的名字 
   `push' 把名字添加到列表的开头
   详细见 [[https://learnxinyminutes.com/docs/zh-cn/elisp-cn/]  [Learn x in y ，minus ]
   
2. 基础操作
   1) 光标的移动是编辑器中最常用的操作所以必须熟知。
      C-f 为前移一个字符， f 代表 forward。
      C-b 为后移一个字符， b 代表 backward。
      C-p 为上移至前一行， p 代表 previous。
      C-n 为上移至下一行， n 代表 next。
      C-a 为移至行首， a 可以理解为最前端。
      C-e 为移至行尾， e 代表 end。
      
   2) 常用的文件操作快捷键组合也必须熟记。
      C-x C-f 为打开目标文件， f 代表 find/file
      C-x C-s 为保存当前缓冲区（Buffer）， s 代表 save
      
3. 内置功能
   1) 编辑器内显示行号
      #+BEGIN_SRC 
       M-x linum-mode
      #+END_SRC
      
   2) 获取帮助
      C-h k 寻找快捷键的帮助信息
      C-h v 寻找变量的帮助信息
      C-h f 寻找函数的帮助信息
      
4. 学习基础Elisp
   
   1) 定义变量
      #+BEGIN_SRC 
      (setq name "username")
      (messasge name) ; -> "username"
      #+END_SRC
      
   2) 定义函数
      #+BEGIN_SRC 
      (defun func()
      (message "Hello, %s" username))   
      #+END_SRC 
      
   3) 执行函数
      #+BEGIN_SRC 
      (func) ; -> Hello, username      
      #+END_SRC
      
   4) 设置快捷键
      #+BEGIN_SRC 
	 (global-set-key (kbd "<f1>") 'func)      
      #+END_SRC
      
   5) 使函数可以直接被调用
      添加(interactive)
      #+BEGIN_SRC 
      (defun func()
      (interactive)
      (message "Hello, %s" username))      
      #+END_SRC
      
5. 开始Hacking
   1) Emacs 的配置文件默认保存在 ~/.emacs.d/init.el 文件中。(C:/Emacs23.2/.emacs.d/init.el)如果其
      不存在可自行创建，配置文件也可保存在C:/Emacs23.2/.emacs 文件中
      
   2) Major Mode 通常是定义对于一种文件类型编辑的核心规则，例如语法高亮、缩进、快捷键绑定等。
      而 Minor Mode 是除去 Major Mode 所提供的核心功能以外的额外编辑功能（辅助功能）。
      一种文件类型同时只能存在一种 Major Mode 但是它可以同时激活一种或多种 Minor Mode
      显示当前所有开启的全部 Minor Mode 的信息
      #+BEGIN_SRC 
      C-h m      
      #+END_SRC
      
   3) 简单的编辑器自定义
      将相应命令写入配置文件中(C:/Emacs23.2/.emacs.d/init.el) 快捷键F2
      在每次编辑配置文件后，刚刚做的修改并不会立刻生效,这时候需要 重启编辑器  或者 重新加载配置文件
      
      重新加载配置文件的方法：
      1) 在当前配置文件中使用 M-x load-file 双击两次回车确认默认文件名
      2) 使用 M-x eval-buffer 去执行当前缓冲区的所有 Lisp 命令
      3) 使用 C-x C-e 来执行某一行的 Lisp 代码
	 常用配置命令：
	 1) 关闭工具栏，tool-bar-mode 即为一个 Minor Mode
            (tool-bar-mode -1)
	    
	 2) 显示行号
            (global-linum-mode 1)
	    
	 3) 关闭启动帮助画面
            (setq inhibit-splash-screen 1)
	    
	 4) 更改显示字体大小 16pt
            (set-face-attribute 'default nil :height 160)
	    
	 5) 利用快捷键 f2 快速打开配置文件
            (defun open-init-file()
            (interactive)
            (find-file "C:/Emacs23.2/.emacs.d/init.el"))
            (global-set-key (kbd "<f2>") 'open-init-file)
	    
	 6) 设置默认工作目录
            (setq default-directory "D:/emacs/")
	    
6. 插件管理
   可在菜单栏 Options > Manage Emacs Packages 中找到默认的插件管理系统
   Company 插件，他是一个用于代码补全的插件
   
   使用的下面的配置将 Company-mode 在全局模式下激活
   (global-company-mode 1)
   
7. TODO
   C-c C-t  开启/关闭 TODO
   
** Day 2
1. 说在前面
   1) 设置光标样式
      (setq-default cursor-type 'bar)
   2) 关闭自动备份
      (setq make-backup-files nil)
   3) 启用代码编辑
      <s + TAB
      C-c + '
      #+BEGIN_SRC C
         #include<stdio.h>

         int main()
         {
           scanf("%d",&i);
         }
                
      #+END_SRC
   4) 文本高亮 
      #+BEGIN_SRC emacs-lisp
      (require 'org)
      (setq org-src-fontify-natively t)
      #+END_SRC
      
   5) 分屏
      C-x 1 仅保留当前窗口
      C-x 2 将当前窗口分到上边
      C-x 3 将当前窗口分到右边
   6) 加入最近打开过文件的选项
      (require 'recentf)
      (recentf-mode 1)
      (setq recentf-max-menu-item 10)
   7) 选中一段文字之后输入一个字符会替换掉你选中部分的文字
      (delete-selection-mode 1)
      
2. Emacs也很美
   
   1) 括号匹配
      (add-hook 'emacs-lisp-mode-hook' show-paren-mode)
      
   2) 高亮当前行
      (global-hl-line-mode t)
      
   3) 文本高亮
      #+BEGIN_SRC emacs-lisp
      (require 'org’)
      (setq org-src-fontify-natively t)
      #+END_SRC
      
   4) 默认全屏
      (setq initial-frame-alist (quote ((fullscreen . maximized))))
      
   5) 设置默认字体
      (set-default-font "微软雅黑-15")
      
   6) 关闭警告音
      (setq ring-bell-function 'ignore)
      
   7) 利用y和n 替代 yes 和no
      fset 'yes-or-no-p 'y-or-n-p)
      
   8) 显示内容所属括号
      #+BEGIN_SRC  emacs-lisp
       (define-advice show-paren-function (:around (fn) fix-show-paren-function)
         "Highlight enclosing parens."
  (cond ((looking-at-p "\\s(") (funcall fn))
        (t (save-excursion
             (ignore-errors (backward-up-list))
             (funcall fn)))))
       
      #+END_SRC
      
   9) 替换默认源，使用MELPHA
      #+BEGIN_SRC ecmacs-lisp
         ;;加载Package开始
(when (>= emacs-major-version 24)
    (require 'package)
    (package-initialize)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))

;; cl - Common Lisp Extension
(require 'cl)

;; Add Packages
(defvar my/packages '(
               ;; --- Auto-completion ---
               company
               ;; --- Better Editor ---
               hungry-delete
               swiper
               counsel
               smartparens
               ;; --- Major Mode ---
               js2-mode
               ;; --- Minor Mode ---
               nodejs-repl
               exec-path-from-shell
               ;; --- Themes ---
               monokai-theme
               ;; solarized-theme
               ) "Default packages")

(setq package-selected-packages my/packages)

(defun my/packages-installed-p ()
    (loop for pkg in my/packages
          when (not (package-installed-p pkg)) do (return nil)
          finally (return t)))

(unless (my/packages-installed-p)
    (message "%s" "Refreshing package database...")
    (package-refresh-contents)
    (dolist (pkg my/packages)
      (when (not (package-installed-p pkg))
        (package-install pkg))))
;;加载Package结束
       
      #+END_SRC
      
   10) 自动加载主题
       #+BEGIN_SRC  emacs-lisp
         (load-theme 'monokai' t)
         
       #+END_SRC
       
   11) hungry_delete
       Package 名称 hungry-delete
       配置
       #+BEGIN_SRC  emacs-lisp
       ;;加载hungry-delete
       (require 'hungry-delete)
       (global-hungry-delete-mode)
       
       #+END_SRC
       
   12) package-list-packages
       
       M-x package-list-packages
       查看所有支持的源
       I 安装标记    u取消标记
       D 准备删除   X 确认删除
       U 搜索更新
       
   13) smex
       优化M-x
       Package 名称 smex
       配置
       #+BEGIN_SRC emacs-lisp
         (require 'smex)
         (smex-initialize)
         (global-set-key (kbd "M-x") 'smex)
         (global-set-key (kbd "M-X") 'smex-major-mode-commands)
         ;; This is your old M-x.
        (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
         
       #+END_SRC
       
   14) swiper 
       优化搜索 
       Package 名称 swiper
       
   15) 自动删除未使用的packages
       #+BEGIN_SRC emacs-lisp
        M-x package-autoremove
        
       #+END_SRC
       
   16) smartparens
       括号自动补全
       配置：
       #+BEGIN_SRC emacs-lisp
         (require 'smartparens-config)
        (smartparens-global-mode t)      
       #+END_SRC
       
   17) 序号自动修正
       M-Ret
       
3. Java IDE 配置
   
   1) Packages 名称 js2-mode
      配置
      #+BEGIN_SRC emacs-lisp
      (setq auto-mode-alist
      (append
      '(("\\.js\\'" . js2-mode))
      auto-mode-alist)) 
      #+END_SRC
   2) nodejs-repl
      ;; 不适用windows??? 
      配置
      #+BEGIN_SRC  emacs-lisp
      (require 'nodejs-repl)      
      #+END_SRC
   3) exec-path-from-shell
      
4. 快捷键
   ;;查找函数、变量、快捷键的定义
   (global-set-key (kbd "C-h C-f") 'find-function)
   (global-set-key (kbd "C-h C-v") 'find-variable)
   (global-set-key (kbd "C-h C-k") 'find-function-on-key)
   
5. 日程安排 Agenda 
   C-c C-t 开启/关闭 TODO 
   C-c C-s 选择想要完成的时间
   C-c C-d 选择想要结束的时间
   C-c a 可以打开 Agenda 模式菜单并选择不同的可视方式（ r -刷新）
   
** Day 3
1. popwin
    光标移动到新打开的窗口
    配置
   #+BEGIN_SRC emacs-lisp
   (require 'popwin)
   (popwin-mode t) 
   #+END_SRC
2. 缩写补全
    #+BEGIN_SRC  emacs-lisp
    (abbrev-mode 1)
    (define-abbrev-table 'global-abbrev-table '(
                                            ("8zl" "zilongshanren")
                                            ("8lxy" "lixinyang")
                                           ))
    
    #+END_SRC
3. 模块化配置

** Day 4
1. 缩进
   配置
   #+BEGIN_SRC emacs-lisp
     (defun indent-buffer()
       (interactive)
       (indent-region (point-min) (point-max)))

     (defun indent-region-or-buffer()
       (interactive)
       (save-excursion (if (region-active-p)
                           (progn
                             (indent-region (region-beginning) (region-end))
                             (message "Indent selected region."))
                         (progn
                           (indent-buffer)
                           (message "Indent buffer.")))))
(global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)
   #+END_SRC
   
2. hippie 补全
 #+BEGIN_SRC  emacs-lisp
(global-set-key (kbd "s-/") 'hippie-expand)

(setq hippie-expand-try-function-list '(try-expand-debbrev
                                        try-expand-debbrev-all-buffers
                                        try-expand-debbrev-from-kill
                                        try-complete-file-name-partially
                                        try-complete-file-name
                                        try-expand-all-abbrevs
                                        try-expand-list
                                        try-expand-line
                                        try-complete-lisp-symbol-partially
                                        try-complete-lisp-symbol))

#+END_SRC
   
3. Dired Mode
   C-x d
   + 创建目录         g 刷新目录
   C 拷贝                D 删除
   R 重命名            d 标记删除
   u 取消标记         x 执行所有的标记
   配置
   #+BEGIN_SRC emacs-lisp
   (setq dired-recursive-deletes 'always)
   (setq dired-recursive-copies 'always)
   ;;只生成一个buffer
  (put 'dired-find-alternate-file 'disabled nil)
   (with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))
   #+END_SRC
   
   C-x C-j 打开当前文件目录
  #+BEGIN_SRC emacs-lisp
   (require 'dired-x)
  #+END_SRC
   
  另一个分屏自动设置成拷贝地址的目标
  #+BEGIN_SRC emacs-lisp
 (setq dired-dwin-target 1)
  #+END_SRC
** Day 5
1. 取消emacs-lisp模式中' 的自动匹配
   #+BEGIN_SRC emacs-lisp
    (sp-local-pair '(emacs-lisp-mode lisp-interaction-mode) "'" nil :actions nil)
 
   #+END_SRC
   
2. 隐藏DOC编码的换行符^M
   1) 隐藏
      #+BEGIN_SRC emacs-lisp
        (defun hidden-dos-eol ()
          "Do not show ^M in files containing mixed UNIX and DOS line endings."
          (interactive)
          (unless buffer-display-table
            (setq buffer-display-table (make-display-table)))
          (aset buffer-display-table ?\^M []))

      #+END_SRC
      
   2) 删除
      #+BEGIN_SRC emacs-lisp
	 (defun remove-dos-eol ()
           "Replace DOS eolns CR LF with Unix eolns CR"
           (interactive)
           (goto-char (point-min))
           (while (search-forward "\r" nil t) (replace-match "")))

      #+END_SRC
      
3. web-mode
   Packages名称 web-web-mode
   配置
   1) 用web-mode打开html文件
      #+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
        (append
         '(("\\.html\\'" . web-mode))
         auto-mode-alist))

#+END_SRC
      
   2) 配置缩进
      1) 初始2个空格
          #+BEGIN_SRC emacs-lisp
  (defun my-web-mode-indent-setup ()
    (setq web-mode-markup-indent-offset 2) ; web-mode, html tag in html file
    (setq web-mode-css-indent-offset 2)    ; web-mode, css in html file
    (setq web-mode-code-indent-offset 2)   ; web-mode, js code in html file
    )
  (add-hook 'web-mode-hook 'my-web-mode-indent-setup)

#+END_SRC
      2) 在2和4个空格间切换
          C-c t i 切换
          M-； 注释当前行
          C-空格 标记行
         #+BEGIN_SRC emacs-lisp
  (defun my-toggle-web-indent ()
    (interactive)
    ;; web development
    (if (or (eq major-mode 'js-mode) (eq major-mode 'js2-mode))
        (progn
          (setq js-indent-level (if (= js-indent-level 2) 4 2))
          (setq js2-basic-offset (if (= js2-basic-offset 2) 4 2))))

    (if (eq major-mode 'web-mode)
        (progn (setq web-mode-markup-indent-offset (if (= web-mode-markup-indent-offset 2) 4 2))
               (setq web-mode-css-indent-offset (if (= web-mode-css-indent-offset 2) 4 2))
               (setq web-mode-code-indent-offset (if (= web-mode-code-indent-offset 2) 4 2))))
    (if (eq major-mode 'css-mode)
        (setq css-indent-offset (if (= css-indent-offset 2) 4 2)))

    (setq indent-tabs-mode nil))

  (global-set-key (kbd "C-c t i") 'my-toggle-web-indent)

#+END_SRC
	 
4. js2-refactor
    JavaScript重构
    配置
    ;; 配合"C-c C-m" 以及内置的快捷键实现重构功能，具体快捷键见[[https://github.com/magnars/js2-refactor.el/blob/master/README.md][GitHub]]
    #+BEGIN_SRC emacs-lisp
(add-hook 'js2-mode-hook #'js2-refactor-mode)
(js2r-add-keybindings-with-prefix "C-c C-m")
#+END_SRC
   
5. Occur Mode 
   ;;快捷键 M-s o
   快速查找    利用C-x o 切换屏幕   按e进入编辑 C-c C-c退出编辑
   ;;配置
   #+BEGIN_SRC emacs-lisp

(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (let ((sym (thing-at-point 'symbol)))
            (when (stringp sym)
              (regexp-quote sym))))
        regexp-history)
  (call-interactively 'occur))
(global-set-key (kbd "M-s o") 'occur-dwim)

   #+END_SRC
   
6. imenu
   快捷键 M-s i
   快速显示函数列表
   配置
   #+BEGIN_SRC  emacs-lisp
    (defun js2-imenu-make-index ()
      (interactive)
      (save-excursion
        ;; (setq imenu-generic-expression '((nil "describe\\(\"\\(.+\\)\"" 1)))
        (imenu--generic-function '(("describe" "\\s-*describe\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
                                   ("it" "\\s-*it\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
                                   ("test" "\\s-*test\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
                                   ("before" "\\s-*before\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
                                   ("after" "\\s-*after\\s-*(\\s-*[\"']\\(.+\\)[\"']\\s-*,.*" 1)
                                   ("Function" "function[ \t]+\\([a-zA-Z0-9_$.]+\\)[ \t]*(" 1)
                                   ("Function" "^[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*=[ \t]*function[ \t]*(" 1)
                                   ("Function" "^var[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*=[ \t]*function[ \t]*(" 1)
                                   ("Function" "^[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*()[ \t]*{" 1)
                                   ("Function" "^[ \t]*\\([a-zA-Z0-9_$.]+\\)[ \t]*:[ \t]*function[ \t]*(" 1)
                                   ("Task" "[. \t]task([ \t]*['\"]\\([^'\"]+\\)" 1)))))
(add-hook 'js2-mode-hook
              (lambda ()
                (setq imenu-create-index-function 'js2-imenu-make-index)))

(global-set-key (kbd "M-s i") 'counsel-imenu)
    
   #+END_SRC
   
7. expand-region
   #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "C-=") 'er/expand-region)
    
   #+END_SRC
   利用 C--   C--=  扩大/缩小选中范围

8. iedit 
    配合expand-region 同时编辑文中相同内容
    快捷键 M-s e 
    配置
    #+BEGIN_SRC  emacs-lisp
    (global-set-key (kbd "M-s e") 'iedit-mode)
    
    #+END_SRC

9. ORG 导出
   C-c C-e
** Day 6
1. Org Mode
    快速新建ToDo事项
    #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "C:/OneDriver/OneDrive - PjPgy/Emacs25.1/PjPgy/Agenda/GTD.org" "工作安排")
         "* TODO [#B] %?\n  %i\n"
         :empty-lines 1)))
(global-set-key (kbd "C-c r") 'org-capture)
    
    #+END_SRC

*** 快速添加TODO
1. 快捷键
    新建 C-c r  保存退出  C-c C-c 
    设置开始时间 C-c C-s 
    设置结束时间 C-c C-d
    查看当日安排 C-c a
2. 配置
    #+BEGIN_SRC  emacs-lisp
    (setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/.emacs.d/gtd.org" "工作安排")
         "* TODO [#B] %?\n  %i\n"
         :empty-lines 1)))
    (global-set-key (kbd "C-c r") 'org-capture)
    
    #+END_SRC
3. Org-pomodoro
    未设置

*** Copany 模式中切换候选词
      #+BEGIN_SRC emacs-lisp
           (with-eval-after-load 'company
        (define-key company-active-map (kbd "M-n") nil)
        (define-key company-active-map (kbd "M-p") nil)
        (define-key company-active-map (kbd "C-n") #'company-select-next)
        (define-key company-active-map (kbd "C-p") #'company-select-previous))

            
      #+END_SRC
*** 批量重命名文件
      C-x C-j 进入 DIred Mode， C-c C-q 进入编辑模式
      C - =/- 选中待编辑文字   M-s e 批量编辑
*** 搜索/替换
      Packages名称 ag(Linux/Mac)  pt(windows)
      未配置
*** 语法检查器
       未配置
      1. flycheck(依赖于2)
      2. eslint
*** 代码块补全
1. yasnippet 
   1. Packages名称 yasnippet
   2. 配置 
       #+BEGIN_SRC emacs-lisp
       (yas-reload-all)
       (add-hook 'prog-mode-hook #'yas-minor-mode)
          
       #+END_SRC
   3. 使用  输入关键词后 按 TAB

2. auto-yasnippet
   1. Packages名称 auto-yasnippet
   2. 配置 
       #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "H-w") #'aya-create)
       (global-set-key (kbd "H-y") #'aya-expand)
          
       #+END_SRC
   3. 使用  输入关键词后 按 TAB
** Day 7
*** 替换默认源到国内的镜像
      将
      #+BEGIN_SRC emacs-lisp
     (when (>= emacs-major-version 24)
  (add-to-list 'package-archives '("melpa" . "http://stable.melpa.org/packages/") t))
       #+END_SRC
      替换为:
      #+BEGIN_SRC emcas-lisp
      (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
                         ("melpa" . "http://elpa.emacs-china.org/melpa/")))
      
      #+END_SRC

*** 利用C-w 向后删除一个单词
      与 剪切 冲突 未设置
              #+BEGIN_SRC  emacs-lisp
      (global-set-key (kbd "C-w") 'backward-kill-word)
#+END_SRC
       
*** Evil
    略过
    模拟Vim
    1. 
       j 下翻   k 上翻
       C-u上翻   C-d下翻
    2. 配置
       #+BEGIN_SRC  emacs-lisp
      (evil-mode 1)
     (setcdr evil-insert-state-map nil)
      (define-key evil-insert-state-map [escape] 'evil-normal-state)
      ;;(setq-default evil-want-C-u-scroll t)
     
       #+END_SRC
    3. Evil State
       evil normal state     evil insert state
       evil visual stable     evil motion state
       evial emacs state    evil operator state
    4. evil-leader
       设置evil-leader 为SPC
    5. 快速切换窗口
       window-numbering
       M- 1 2 切换屏幕
       配置
       #+BEGIN_SRC  emacs-lisp
	  (window-numbering-mode t)
       
       #+END_SRC
       
    6. powerline-evil 
       配合window-numbering显示窗口号
       配置
       #+BEGIN_SRC  emacs-lisp
        (require 'powerline-evil)
        (powerline-default-theme)
        
       #+END_SRC
       
    7. evil-surround
       #+BEGIN_SRC emacs-lisp
        (require 'evil-surround)
        (global-evil-surround-mode)

       #+END_SRC
       
    8. evil-nerd-commenter
       快速 增加/删除注释
       快捷键 /,
       配置
       #+BEGIN_SRC emacs-lisp
(evilnc-default-hotkeys)
(define-key evil-normal-state-map (kbd ",/") 'evilnc-comment-or-uncomment-lines)
(define-key evil-visual-state-map (kbd ",/") 'evilnc-comment-or-uncomment-lines)
        
       #+END_SRC
       
    9. 使其他模式支持normal-mode 并支持Evil快捷键
       #+BEGIN_SRC emacs-lisp
        (dolist (mode '(ag-mode
		;;其他模式
		occur-mode
		))
  (add-to-list 'evil-emacs-state-modes mode))

(add-hook 'occur-mode-hook
	  (lambda()
	    (evil-add-hjkl-bindings occur-mode-map 'emacs
	      (kbd "/") 'evil-search-forward
	      (kbd "n") 'evil-search-next
	      (kbd "N") 'evil-search-previous
	      (kbd "C-d" 'evil-scroll-down
		   (kbd "C-u") 'evil-scroll-up)
	      )))
        
       #+END_SRC

    10. which-key 
         显示候补快捷键
         配置
         #+BEGIN_SRC emacs-lisp
        (which-key-mode 1)
(provide 'init-packages)
(setq which-key-side-window-location 'right) 
         
         #+END_SRC
** Day 8
       Cask
       Emacs Lisp 的项目管理工具
       Linux MAc   略过
** Day 9
*** 宏
   例子
   #+BEGIN_SRC emacs-lisp
     (defmacro my-print(num)
       (message "this is a number: %d" num))

   #+END_SRC
   
   利用"`"对宏中的变量先求值再替换
   #+BEGIN_SRC emacs-lisp
   (defmacro my-print-2 (num)
`(message "This is a number: %d", num))

(my-print-2 (+ 2 3))
输出结果为5
   
   #+END_SRC

  macroexpand 展开定义的宏
*** use-package
1. 更安全的 require
在 Emacs 中, 当我们要引入一个包时, 通常会使用以下代码:
#+BEGIN_SRC emacs-lisp
(require 'package-name)

#+END_SRC
但是当 package-name 不在 load-path 中时, 以上代码会抛出错误. 使用 Use-package 可以避免:
#+BEGIN_SRC emacs-lisp
(use-package package-name)

#+END_SRC

2. 将配置集中
当我们引入某个包时, 有可能需要定义一些与这个包相关的变量, 使用 Use-package 实 现这个需求如下:
#+BEGIN_SRC emacs-lisp
(use-package package-name
  :init
  (setq my-var1 "xxx")
  :config
  (progn
    (setq my-var2 "xxx")
    (setq my-var3 "xxx")
    )
  )

#+END_SRC

在上例中, init 后的代码在包的 require 之前执行, 如果这段代码出错则跳过包的 require.
config 后的代码在包的 require 之后执行.
init 与 config 之后只能接单个表达式语句, 如果需要执行多个语句, 可以用 progn .

3. autoload



   
   
   
   
** Day 10


