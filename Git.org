Git 分布版本控制系统

[[http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001373962845513aefd77a99f4145f0a2c7a7ca057e7570000][教程]]
* Git简介
** Git的诞生
    CVS , SVN(最常用) 集中式版本控制系统
    集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。
    分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。 
    在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。

* 安装Git
** Linux
1. apt-get安装
   #+BEGIN_SRC 
 sudo apt-get install git
#+END_SRC
2. Git克隆
   1. 从Git官网下载源码
   2. tar -xvzf 解压
   3. 依次输入
     ./config    make   sudo make install
** Windows
[[https://git-for-windows.github.io][1. 下载地址(墙外)    ]][[https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fgit][下载地址(百度云)]]
2. 默认安装，在开始菜单找到 Git”->“Git Bash”
3. 配置，在命令行输入：
   #+BEGIN_SRC 
$ git config --global user.name "PjPgy"
$ git config --global user.email "pjpgy123@163.com"
#+END_SRC
* 创建版本库
    什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。

1. 选择一个合适的地方，创建一个空目录
2. 通过git init命令把这个目录变成Git可以管理的仓库
   #+BEGIN_SRC 
cd /c/git 
git init 
   
   #+END_SRC
3. 注：
    利用Notepad++代替记事本，并把Notepad++的默认编码设置为UTF-8 without BOM
4. 把一个文件放到Git仓库
   1. 用命令git add告诉Git，把文件添加到仓库
    #+BEGIN_SRC 
    git add readme.txt
    
    #+END_SRC
    若成功则不会有任何提示

   2. 用命令git commit告诉Git，把文件提交到仓库
    #+BEGIN_SRC 
    git commit -m "wrote a readme file"
   
    #+END_SRC
    注意：
      -m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。
      为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
      #+BEGIN_SRC 
      git add file1.txt
      git add file2.txt file3.txt
     git commit -m "add 3 files."
      
      #+END_SRC 
* 时光穿梭机
    git status命令可以让我们时刻掌握仓库当前的状态，可以列出哪些文件被修改了
    git diff +文件名 顾名思义就是查看difference，显示的格式正是Unix通用的diff格式
    知道了作了什么修改后，再提交到仓库就放心多了，提交修改和提交新文件是一样的两步

   要随时掌握工作区的状态，使用git status命令。
   如果git status告诉你有文件被修改过，用git diff可以查看修改内容。  
** 版本回退
   git log命令显示从最近到最远的提交日志
   如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
   
   版本回退 git reset
   首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本才可以回退，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
   #+BEGIN_SRC 
   git reset --hard HEAD^
   
   #+END_SRC
    此时最新的那个版本已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那的commit id是于是就可以指定回到未来的某个版本：
    #+BEGIN_SRC 
    git reset --hard 3628164
    
    #+END_SRC
    版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。

   现在，你回退到了某个版本，关掉了电脑，如果又后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办在Git中，总是有后悔药可以吃的，Git提供了一个命令git reflog用来记录你的每一次命令

   HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

   穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

   要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
