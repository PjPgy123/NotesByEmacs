* 线性表
** 1. 结构
#+begin_src C
typedef struct Node
{
    int data;
    Node *next;
};

#+end_src

** 2. 操作
    1) 初始化

    2) 头插法建立链表
    #+begin_src C
    P->next = L->next;
    L->next = P;
    
    #+end_src
 
    3) 尾插法建立链表
    #+begin_src C
    L->next = P;
    L = P;
    
    #+end_src

    4) 判断链表是否为空

    5) 查找第i个元素

    6) 查找给定值在链表中的位置

    7) 在指定位置插入元素

    8) 删除指定位置元素

    9) 计算链表中元素个数

    10) 整表删除
	#+begin_src C
	p = L->next;
	while(P)
	{
	    q = p->next;
	    free(p);
	    p = q;
	}
	L->next = NULL;
	
	#+end_src
	
   
       





* 队列

** 循环队列
*** 1. 结构
    #+begin_src C
    typedef struct
    {
        ElemType *base;
	
	int front;
	int rear;
    }CycleQueue;
    
    #+end_src
*** 2. 操作
    1) 初始化循环队列
    #+begin_src C
    InitQuee(CycleQueue *q)
    {
        q->base = (CycleQueue *)malloc(MAXSIZE * sizeof(ElemType));
	if(!(q->base))
	    exit(0);

	q->front = q->next = 0;
    }
  
    #+end_src 
    2) 入队列
    #+begin_src C
    InsertQueue(CycleQueue *q, ElemType e)
    {
    if((q->rear+1)%MAXSIZE == q->front)
        return;
    q->base[q->rear] = e;
    q->rear = (q->rear+1)%MAXSIZE;
    }
    #+end_src
    3) 出队列
    #+begin_src C
    DeleteQueue(CycleQueue *q, ElemType *e)
    {
    if(q->front == q->rear)
        return;
    *e = q->base[q->front]; 
    q->front = (q->front+1)%MAXSIZE;
    }
    
    #+end_src
      

* 递归
注：递归效率较低，若不是万不得已，则尽量用迭代(循环)实现
1. 斐波那契数
   1) 迭代法
      #+begin_src C
        #include<stdio.h>

        int main()
        {
          int i;
          int fib[20];
         
          fib[0] = 0;
          fib[1] = 1;

          printf("%5d %5d ", fib[0], fib[1]);

          for(i=2; i<20; i++)
            {
              fib[i] = fib[i-1] + fib[i-2];

              printf("%5d ", fib[i]);
            }
          printf("\n");
          return 0;
        }

      #+end_src
   2) 递归法
       #+begin_src C
         #include<stdio.h>

         int Fib(int i)
         {
           if(i < 2)
             return i == 0 ? 0 : 1;
           return Fib(i-1) + Fib(i-2);
         }

         int main()
         {
           int i;
           for(i=0; i<20; i++)
             printf("%5d",Fib(i));

           printf("\n");

           return 0;


           ｝
       #+end_src   
2. 阶乘
    #+begin_src C
    int factorial(int n)
    {
	if(0 == n)
	     return 1;
	else
	    return n*factorial(n-1);
    }

    #+end_src
3. 将输入的任意字符串逆向输出
   #+begin_src C
   #include<stdio.h>
   #include<stdlib.h>

   void print()
   {
       char a;
       scanf("%c", &a);
       if (a != '#')
           print();
		  
       if(a != '#')
	   printf("%c", a);		             
   }

   void main()
   {
       print();
		
   }
  #+end_src
4. 折半查找算法
5. 汉诺塔
   #+BEGIN_SRC C
     #include<stdio.h>
     //将n个盘子从x借助y移动到z
     void move(int n, char x, char y, char z)
     {
       if(1 == n)
         printf("%c -> %c\n",x,z);
       else
         {
           move(n-1, x, z, y);   //将n-1个盘子从x借助z移动到y
           printf("%c -> %c\n",x,z); //将第n个盘子从x移到z上
           move(n-1, y, x, z);   //将n-1个盘子从y借助x移动到z
         }
     }

     int main()
     {
       int n;
       printf("请输入汉诺塔的层数：");
       scanf("%d",&n);
       printf("移动的步骤如下：\n");
       move(n, 'X', 'Y', 'Z'); 
       return 1;
     }
        
   #+END_SRC
6. 八皇后问题
   1) 递归算法
	  #+BEGIN_SRC C
            #include<stdio.h>

            int count = 0;

            int isOK(int row, int j, int (*chess)[8])
            {
              int i,k;
              int flag1=0,flag2=0,flag3=0,flag4=0,flag5=0;
              /* /\* //判断列方向 *\/ */
              /* /\* for(i=0; i<8; i++) *\/ */
              {
                if(*(*(chess+i)+j) != 0)   
                  {
                    flag1 = 1;
                    break;
                  }
              }
              //判断左上方
              for(i=row, k=j; i>=0 && k>=0; i--,k--)
                {
                  if(*(*(chess+i)+k) != 0)
                    {
                      flag2 = 1;
                      break;
                    }
                }
              //判断右下方
              for(i=row, k=j; i<8 && k<8; i++,k++)
                {
                  if(*(*(chess+i)+k) != 0)   
                    {
                      flag3 = 1;
                      break;
                    }
                }
              //判断右上方
              for(i=row, k=j; i>=0 && k<8; i--,k++)
                {
                  if(*(*(chess+i)+k) != 0)   
                    {
                      flag4 = 1;
                      break;
                        
                    }
                }
              //判断左下方
              for(i=row, k=j; i<8 && k>=0; i++,k--
                {
                  if(*(*(chess+i)+k) != 0)   
                    {
                      flag5 = 1;
                      break;
                    }
                }
                    if(flag1 || flag2 || flag3 || flag4 || flag5)
                      return 0;
                    else 
                      return 1;
                  }

              //参数row表示起始行
              //参数n表示列数
              //参数(*chess)[8]表示指向棋盘每一行的指针
              void EightQueens(int row, int n, int (*chess)[8])
              {
                int chess2[8][8];
                int i,j;
               
                for(i=0; i<8; i++)
                  {
                    for(j=0; j<8; j++)
                      chess2[i][j] = chess[i][j];
                  }

                if(8 == row)
                  {
                    printf("第%d种布局为：\n", count+1);
                    for(i=0; i<8; i++)
                      {
                        for(j=0; j<8; j++)
                          {
                            printf(" %d ", *(*(chess2+i)+j));
                          }
                        printf("\n");
                                    
                      }
                    printf("\n\n");
                    count++;
                  }
                else
                  {
                        
                    for(j=0; j<n; j++)
                      {
                        //判断这个位置是否可行
                        if(isOK(row, j, chess))
                          {
                            for(i=0; i<8; i++)
                              {
                                ,*(*(chess2+row)+i) = 0;
                              }
                            ,*(*(chess2+row)+j) = 1;
                            EightQueens(row+1, n, chess2);
                          }
                      }
                  }

              }

              int main()
              {
                int chess[8][8];
                int i,j;

                for(i=0; i<8; i++)
                  {
                    for(j=0; j<8; j++)
                      chess[i][j] = 0;
                  }

                EightQueens(0, 8 ,chess);

                printf("总共有%d种解法！\n",count);
                return 1;
              }

#+END_SRC

   2) 回溯算法


* 字符串
** BF算法(Brute Force)
      两个长度分别为N和M的字符串S和T，依次比较 S[ 1]和T[ 1]，若相等则比较S[ 21]和T[2 ]，
直到T[ M]为止，若S[ 1]和T[ 1]不相等，则T向右移动一个字符继续比较
      时间复杂度：O(M*N)
      S为主串，T为子串，这种子串定位操作通常陈伟串的模式匹配

** KMP算法


    
